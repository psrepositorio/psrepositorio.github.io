{"version":3,"sources":["imagens/prod1.jpg","db/dbvendas.js","actions/parametrosActions.js","actions/requisicoesActions.js","stores/index.js","layout/tema.js","componentes/controles/telaInicial.js","componentes/controles/login.js","componentes/controles/erroInicial.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","db","Dexie","version","stores","cliente","produto","parametros","autenticacao","iniciaApp","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","store","novoState","usuario","erro","wrap","_context","prev","next","objectSpread","state","put","autid","autusuario","autsenha","autlogado","count","catch","err","sent","status","get","setState","t0","concat","name","message","stop","_x","_x2","apply","this","arguments","addFail","useGlobal","useGlobalHook","React","mensagem","alerta","logado","actions","theme","createMuiTheme","palette","text","primary","secondary","disabled","hint","main","contrastText","TelaInicial","props","react_default","createElement","Box","flexDirection","display","m","alignItems","justifyContent","bgcolor","minHeight","src","logo","width","height","Typography","variant","color","gutterBottom","align","LinearProgress","Login","ErroInicial","_useGlobal","_useGlobal2","slicedToArray","globalState","App","globalActions","useEffect","parametrosActions","ThemeProvider","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","error","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.d45bf0b7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/prod1.0e4376a6.jpg\";","import Dexie from 'dexie';\r\n\r\nconst db = new Dexie('vendas');\r\ndb.version(1).stores({\r\n    cliente: `cl1codig, cl1nomec, cl1cpf, cl1cnpj, cl1munic`,\r\n    produto: `cp1codig, cp1descr, cp1estacao, cp1posic`,\r\n    parametros: `parcodig`,\r\n    autenticacao:`autid,autusuario`\r\n});\r\n\r\nexport default db;\r\n\r\n","export const iniciaApp = async (store,db) => {\r\n\r\nconst novoState  = { ...store.state };\r\ntry {\r\n\r\n    await db.autenticacao.put({autid:1, autusuario:\"Felipe\",autsenha:\"567201\",autlogado:true})\r\n    const isLogado = await db.autenticacao\r\n    .count().catch('NotFoundError',\r\n        err => {\r\n            return 0    \r\n        }\r\n    );\r\n\r\n    if (isLogado === 0){\r\n        \r\n        novoState.status = \"LOGIN\";\r\n        \r\n    } else {\r\n        const usuario = await db.autenticacao.get(1);\r\n        if(!usuario.autlogado){\r\n            novoState.status = \"LOGIN\";\r\n        } else{\r\n            novoState.status = \"OK\";\r\n            novoState.autenticacao = {\r\n                usuario: usuario.autusuario\r\n            }\r\n        }\r\n    }\r\n    store.setState(novoState);\r\n\r\n} catch (err) {\r\n    const erro = `${err.name} : ${err.message}`\r\n    novoState.status = \"ERRO_INICIAL\";\r\n    novoState.erro   = erro\r\n    store.setState(novoState);    \r\n}  \r\n};\r\n  ","export const addFail = (store,erro) => {\r\n    const novoState  = { ...store.state };\r\n    novoState.status = \"ERRO\";\r\n    novoState.erro   = erro\r\n    store.setState(novoState);\r\n  };","import React from \"react\";\r\nimport useGlobalHook from \"use-global-hook\";\r\n\r\nimport * as actions from \"../actions/\";\r\n\r\nconst initialState = {\r\n  status: \"INICIAL\",\r\n  erro: \"\",\r\n  mensagem: \"\",\r\n  alerta: \"\",\r\n  autenticacao:{\r\n    usuario:'',\r\n    logado:false\r\n  }\r\n};\r\n\r\nconst useGlobal = useGlobalHook(React, initialState, actions);\r\n\r\nexport default useGlobal;","import { createMuiTheme } from '@material-ui/core/styles';\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n      text: {\r\n        primary: \"#fff\",\r\n        secondary: \"rgba(0, 0, 0, 0.54)\",\r\n        disabled: \"rgba(0, 0, 0, 0.38)\",\r\n        hint: \"rgba(0, 0, 0, 0.38)\"\r\n      },\r\n      primary: {\r\n        // light: will be calculated from palette.primary.main,\r\n        main: \"#062f4f\",\r\n        // dark: will be calculated from palette.primary.main,\r\n        // contrastText: will be calculated to contrast with palette.primary.main\r\n        contrastText: \"#fff\"\r\n      },\r\n      secondary: {\r\n        main: \"#b82601\",\r\n\r\n      },\r\n      // error: will use the default color\r\n    },\r\n  });\r\n\r\n  export default theme","import React from 'react'\r\nimport { LinearProgress, Box, Typography } from '@material-ui/core'\r\nimport logo from '../../imagens/prod1.jpg'\r\nexport default function TelaInicial(props) {\r\n\r\n    return (\r\n\r\n        <Box\r\n            flexDirection=\"column\"\r\n            display=\"flex\" m={-1}\r\n            alignItems=\"center\"\r\n            justifyContent=\"center\"\r\n            bgcolor=\"primary.main\"\r\n            minHeight=\"100vh\">\r\n            <Box display=\"flex\" justifyContent=\"center\" p={1}>\r\n                <img src={logo} width=\"50%\" height=\"50%\" />\r\n            </Box>\r\n            <Box display=\"flex\" justifyContent=\"center\">\r\n                <Typography variant=\"subtitle1\" color=\"textPrimary\"\r\n                    gutterBottom align=\"center\">\r\n                    {\"Carregando Configurações\"}\r\n                </Typography>\r\n\r\n            </Box>\r\n            {props.usuario &&\r\n            <Box display=\"flex\" justifyContent=\"center\">\r\n            <Typography variant=\"subtitle1\" color=\"textPrimary\"\r\n                    gutterBottom align=\"center\">\r\n                    {` Olá: ${props.usuario}`}\r\n                </Typography>\r\n            </Box>}\r\n            <Box>\r\n            <LinearProgress color=\"secondary\" />\r\n            </Box>\r\n            \r\n        </Box>\r\n        \r\n        \r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Login() {\r\n    return (\r\n        <div>\r\n            Login\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport useGlobal from '../../stores';\r\n\r\n\r\n\r\nexport default function ErroInicial() {\r\n    const [globalState, globalActions] = useGlobal();\r\n    const { erro } = globalState;\r\n    return (\r\n        <div>\r\n            {erro}\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect } from 'react';\r\nimport db from './db/dbvendas'\r\n\r\nimport useGlobal from './stores';\r\nimport { ThemeProvider } from '@material-ui/styles';\r\nimport theme from './layout/tema';\r\nimport TelaInicial from './componentes/controles/telaInicial'\r\nimport Login from './componentes/controles/login'\r\nimport Aplicacao from './componentes/controles/aplicacao'\r\nimport ErroInicial from './componentes/controles/erroInicial'\r\n\r\nfunction App() {\r\n  const [globalState, globalActions] = useGlobal();\r\n  const { status, autenticacao } = globalState;\r\n  useEffect(() => {\r\n\r\n      globalActions.parametrosActions.iniciaApp(db);\r\n      \r\n  }, [])\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      \r\n      {status === \"INICIAL\" && \r\n      (\r\n        <TelaInicial />\r\n      )}\r\n      {status === \"LOGIN\" && \r\n      (\r\n        <Login />\r\n       )}\r\n      {status === \"OK\" && \r\n      (\r\n        <TelaInicial usuario={autenticacao.usuario}/>\r\n       )}\r\n      {status === \"ERRO_INICIAL\" && \r\n      (\r\n        <ErroInicial />\r\n       )}\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'typeface-roboto'\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}